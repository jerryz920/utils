# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

if [ "$PS1" ]; then
  set mail=/usr/spool/mail/$USER # What file to check for new mail
  set -o notify 
  # Report change in jobs' status

  # export PS1="[\u@\h] (\#)\$ " # Set our prompt (man bash for more info)
  # the line below will generate a very colorful prompt for those who
  # like such things
  if [[ ${EUID} == 0 ]] ; then
    PS1='\[\033[01;31m\]\h\[\033[01;34m\] \W \$\[\033[00m\] '
  else
    PS1='\[\033[01;32m\]\u@\h\[\033[01;34m\] \w \$\[\033[00m\] '
    #PS1='\[\e[1;32m\][\A] \[\e[0;0m\][\[\e[1;32m\]\w\[\e[0;0m\]] \$ '
  fi

  if [ -n "$TERM" ]; then
    if [ "$TERM" = "xterm" ]; then
      # define 'mytitle' alias to set tile bars on
      # xterms
      alias icon_name='set icon_name = /`echo $cwd |
      sed -e s-.\*/--`'
      alias mytitle='icon_name; echo -n ]0\;\!*\'

      # define 'name', 'icon', and 'title' aliases to
      # allow the user
      # to give xterm windows names by hand.
      alias name='echo -n ]0\;\!*\'
      alias icon='echo -n "]1\;\!*\"'
      alias title='echo -n "]2\;\!*\"'

      # use xrs (resize) to reset window size after
      # resizing an xterm
      alias xrs='set -o noglob; eval `resize`;
      unset noglob'

      # un-comment out the following lines if you want
      # the machine
      # name and current directory to appear in the
      # titlebar and
      # the last part of the current directory to
      # appear in the
      # icon manager.
      #
      # mytitle
      # alias cd="chdir \!*; mytitle"
      # alias pushd="pushd \!*; mytitle"
      # alias popd="popd \!*; mytitle"
    fi
  fi
fi;

if [ -f ~/.bashrc.local ]; then
  source ~/.bashrc.local
fi



export GOPATH=$HOME/dev
export GOROOT=$HOME/goroot
export PATH=$PATH:$HOME/bin:$GOPATH/bin:$GOROOT/bin/
export EDITOR=vim


alias cgithub="cd $GOPATH/src/github.com"
alias ckube="cd $GOPATH/src/github.com/jerryz920/kubernetes"
alias crepo="cd $GOPATH/src/github.com/jerryz920"
alias ckernel="cd $GOPATH/src/github.com/jerryz920/linux"
alias clinux="cd $GOPATH/src/github.com/jerryz920/linux"
alias cutil="cd $GOPATH/src/github.com/jerryz920/utils"
alias cutils="cd $GOPATH/src/github.com/jerryz920/utils"

gpush()
{
  local upstream=origin
  local branch=master
  if [ $# -eq 2 ]; then
    upstream=$1
    branch=$2
  elif [$# -eq 1 ]; then
    upstream=$1
  fi
  git push $upstream $branch
}

gcommit()
{
  local msg=${1:-"utility quick commit"}
  git commit -a -m "$msg"
}

gpull()
{
  local upstream=origin
  local branch=master
  if [ $# -eq 2 ]; then
    upstream=$1
    branch=$2
  elif [ $# -eq 1 ]; then
    upstream=$1
  fi
  git pull $upstream $branch
}

gdiff()
{
  local n=${1:-1}
  git diff -r HEAD~$n
}





